import plot
import numpy as np
import sys
import customtkinter as ctk
from customtkinter import filedialog
from tkinter import *

np.set_printoptions(threshold=sys.maxsize)


def read_data(file_location: str):
    """
    Function to read in data from the asc files generated by GEBCO

    Parameters:
    - filename: The filename to be read

    Returns:
    A pandas dataframe of the read values
    """
    plot.plot_config.file_data = np.loadtxt(file_location, dtype=int, skiprows=6)
    return plot.plot_config.file_data


def browse_files():
    """
    Function to generate file explorer for the user and collect desired data file location

    Parameters:

    Returns:
    """
    plot.plot_config.active_file = filedialog.askopenfilename(initialdir="/",
                                                               title="Select a File",
                                                               filetypes=(("ASCII files", "*.asc"),
                                                     ("Text files", "*.txt"),
                                                     ("CSV files", "*.csv")))

    # Change label contents
    file_location_label.configure(text="File Opened: " + plot.plot_config.active_file)
    plot.plot_config.file_data = read_data(plot.plot_config.active_file)
    loaded_data_display.insert(index='insert', text=plot.plot_config.file_data)


def retrieve_coords():
    """
    Function to retrieve the Latitude and Longitude co-ordinates from the filename

    Parameters:

    Returns:
    """
    string_coords = plot.plot_config.active_file.split("/")[-1][11:][:-4].split("_")
    float_coords = []

    for coord in string_coords:
        float_coords.append(float(coord[1:]))

    plot.plot_config.start_lat = float_coords[0]
    plot.plot_config.end_lat = float_coords[1]
    plot.plot_config.start_lon = float_coords[2]
    plot.plot_config.end_lon = float_coords[3]


def set_custom_configs():
    plot.plot_config.show_axis_labels = axis_label_var.get()
    plot.plot_config.plot_color = option_menu_var.get()
    plot.plot_config.save_plot = save_plot_var.get()
    plot.plot_config.save_plot_extension = save_plot_extension_var.get()


app = ctk.CTk()
app.title = "Bathymetry-Plot"
app.geometry("1500x800")

tabview = ctk.CTkTabview(master=app, width=1450, height=775)
tabview.add("Load Data")
tabview.add("Customize Plot")
tabview.set("Load Data")

browse_file_button = ctk.CTkButton(master=tabview.tab("Load Data"), text="Browse Files", command=browse_files)
file_location_label = ctk.CTkLabel(master=tabview.tab("Load Data"), text="Load a file to start")
loaded_data_display = ctk.CTkTextbox(master=tabview.tab("Load Data"), width=1450, height=650, wrap='none')

tabview.pack()
browse_file_button.pack()
file_location_label.pack()
loaded_data_display.pack()

axis_label_var = IntVar()
axis_label_frame = ctk.CTkFrame(master=tabview.tab("Customize Plot"))
axis_label_prompt = ctk.CTkLabel(master=axis_label_frame, text="Do you wish to show axis labels?")
axis_label_true_option = ctk.CTkRadioButton(master=axis_label_frame, text="Yes", value=True,
                                            variable=axis_label_var)
axis_label_false_option = ctk.CTkRadioButton(master=axis_label_frame, text="No", value=False,
                                             variable=axis_label_var)

color_option_frame = ctk.CTkFrame(master=tabview.tab("Customize Plot"))
color_label_prompt = ctk.CTkLabel(master=color_option_frame, text="Select a color scheme for the plot:")
color_list = ["seismic", "copper"]
option_menu_var = StringVar()
color_option = ctk.CTkOptionMenu(master=color_option_frame, values=color_list, variable=option_menu_var)

save_plot_frame = ctk.CTkFrame(master=tabview.tab("Customize Plot"))
save_plot_prompt = ctk.CTkLabel(master=save_plot_frame, text="Save the plot as an image:")
save_plot_var = StringVar(value="off")
save_plot_switch = ctk.CTkSwitch(master=save_plot_frame,text="", variable=save_plot_var, onvalue="on", offvalue="off")
save_plot_extension_label = ctk.CTkLabel(master=save_plot_frame, text="File format:")
plot_extensions = [".png", ".jpg", ".svg", ".pdf"]
save_plot_extension_var = StringVar()
save_plot_extension_option = ctk.CTkOptionMenu(master=save_plot_frame, values=plot_extensions,
                                               variable=save_plot_extension_var)

generate_plot_button = ctk.CTkButton(master=tabview.tab("Customize Plot"), width=1400, text="Generate Plot",
                                command=lambda: [retrieve_coords(), set_custom_configs(), plot.generate_plot_window()])

axis_label_frame.pack(anchor='w', padx=5)
axis_label_prompt.pack()
axis_label_true_option.pack(pady=5)
axis_label_false_option.pack()
color_option_frame.pack(anchor='w', padx=5, pady=20)
color_label_prompt.pack()
color_option.pack()
save_plot_frame.pack(anchor="w", padx=5, pady=5)
save_plot_prompt.pack()
save_plot_switch.pack()
save_plot_extension_label.pack()
save_plot_extension_option.pack()
generate_plot_button.pack(anchor='s',side="bottom", padx=5, pady=5)


if __name__ == "__main__":
    app.mainloop()
