import pandas as pd
from tkinter import *
from tkinter import filedialog
import plot

active_file: str = ""

def read_data(file_location: str):
    """
    Function to read in data from the asc files generated by GEBCO

    Parameters:
    - filename: The filename to be read

    Returns:
    A pandas dataframe of the read values
    """
    data = pd.read_csv(filepath_or_buffer=file_location, sep=r" |\n", skiprows=6, header=None, engine="python")
    return data


def browse_files():
    """
    Function to generate file explorer for the user and collect desired data file location

    Parameters:

    Returns:
    """
    global active_file
    file_location = filedialog.askopenfilename(initialdir="/",
                                             title="Select a File",
                                             filetypes=(("ASCII files", "*.asc"),
                                                     ("Text files", "*.txt"),
                                                     ("CSV files", "*.csv")))

    # Change label contents
    show_path_label.configure(text="File Opened: " + file_location)
    data_display.insert(END, read_data(file_location).to_string())
    # set currently active file location
    active_file = file_location



def prompt_plot_generation(location):
    """
    Helper function to call function in plot module

    Parameters:
    - location: The location of the file to be opened

    Returns:
    """
    plot.generate_plot(location)


# create tkinter window
window = Tk()
window.title('BathPlot')
window.geometry("1500x800")

# create widget to display selected file path
show_path_label = Label(window,
                        text="File Opened: ")
# create button widget to allow browsing file system
browse_file_button = Button(window,
                        text="Browse Files",
                        command=browse_files)
# create button widget to generate plot of given dataframe
generate_plot_button = Button(window, text="Generate",
                              fg="red", relief="groove", bg="light blue",
                              height=2, width=20,
                              command=lambda: [plot.generate_plot_window(), prompt_plot_generation(active_file)])

# add scroll bars and text widget to view all collected data from selected file
horizontal_scroll = Scrollbar(window, orient='horizontal')
horizontal_scroll.pack(side=BOTTOM, fill=X)
vertical_scroll = Scrollbar(window, orient='vertical')
vertical_scroll.pack(side=RIGHT, fill=Y)
data_display = Text(window,
                    height=40, width=165, wrap=NONE, xscrollcommand=horizontal_scroll.set,
                    yscrollcommand=vertical_scroll.set)
vertical_scroll.config(command=data_display.yview)
horizontal_scroll.config(command=data_display.xview)

# render all widgets
browse_file_button.place(x=25, y=25)
show_path_label.place(x=100, y=28)
data_display.place(x=100, y=60)
generate_plot_button.place(x=1200, y=715)


if __name__ == "__main__":
    window.mainloop()
