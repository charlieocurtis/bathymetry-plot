import plot
import numpy as np
import sys
from tkinter import *
from tkinter import filedialog

np.set_printoptions(threshold=sys.maxsize)

# instantiate 'main' version of 'PlotConfig' class to pass relevant data to plot
pass_plot_configs = plot.PlotConfig()


def read_data(file_location: str):
    """
    Function to read in data from the asc files generated by GEBCO

    Parameters:
    - filename: The filename to be read

    Returns:
    A pandas dataframe of the read values
    """
    global pass_plot_configs
    pass_plot_configs.file_data = np.loadtxt(file_location, dtype=int, skiprows=6)
    return pass_plot_configs.file_data


def browse_files():
    """
    Function to generate file explorer for the user and collect desired data file location

    Parameters:

    Returns:
    """
    global pass_plot_configs
    pass_plot_configs.active_file = filedialog.askopenfilename(initialdir="/",
                                                               title="Select a File",
                                                               filetypes=(("ASCII files", "*.asc"),
                                                     ("Text files", "*.txt"),
                                                     ("CSV files", "*.csv")))

    # Change label contents
    show_path_label.configure(text="File Opened: " + pass_plot_configs.active_file)
    data_display.insert(END, np.array2string(read_data(pass_plot_configs.active_file), separator=','))


def retrieve_coords():
    """
    Function to retrieve the Latitude and Longitude co-ordinates from the filename

    Parameters:

    Returns:
    """
    global pass_plot_configs
    string_coords = pass_plot_configs.active_file.split("/")[-1][11:][:-4].split("_")
    float_coords = []

    for coord in string_coords:
        float_coords.append(float(coord[1:]))

    pass_plot_configs.start_lat = float_coords[0]
    pass_plot_configs.end_lat = float_coords[1]
    pass_plot_configs.start_lon = float_coords[2]
    pass_plot_configs.end_lon = float_coords[3]


def set_plot_config():
    """
    Helper function to assign the attributes in plot module version of pass_plot_configs equal to pass_plot_configs

    Parameters:

    Returns:
    """
    global pass_plot_configs
    pass_plot_configs.show_axis_labels = radio_var.get()
    plot.plot_config = pass_plot_configs


# create tkinter window
window = Tk()
window.title('BathPlot')
window.geometry("1500x800")


# create widget to display selected file path
show_path_label = Label(window, text="File Opened: ", wraplength=80)

# create button widget to allow browsing file system
browse_file_button = Button(window,text="Browse Files", command=browse_files)

# create button widget to generate plot of given dataframe
generate_plot_button = Button(window, text="Generate", fg="red", relief="groove", bg="light blue", height=2, width=20,
                              command=lambda: [retrieve_coords(), set_plot_config(), plot.generate_plot_window()])

# create prompt to request users input via radio buttons
axis_label_prompt = Label(window, text="Show axis labels?")
# create radio buttons to take the users input for customization
radio_var = IntVar()
# noinspection PyTypeChecker
axis_label_radio_true = Radiobutton(window, text="Yes", variable=radio_var, value=1)
# noinspection PyTypeChecker
axis_label_radio_false = Radiobutton(window, text="No", variable=radio_var, value=0)


# render all widgets in position
data_display = Text(window, height=40, width=75, wrap=NONE)
browse_file_button.grid(column=0, row=0, padx=40, pady=5)
show_path_label.grid(column=0, row=1, columnspan=3, padx=40, pady=5)
data_display.grid(column=3, row=0, rowspan=10, padx=5, pady=5)
generate_plot_button.grid(column=10, row=10, padx=5, pady=5)

axis_label_prompt.grid(column=5, row=0, padx=5)
axis_label_radio_true.grid(column=5, row=1, padx=5)
axis_label_radio_false.grid(column=5, row=2, padx=5)


if __name__ == "__main__":
    window.mainloop()
